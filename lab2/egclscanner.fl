%option noyywrap
%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define EOFT 0
#define BEGIN_TOK 1010
#define END_TOK 1020
#define COMMENT 1030

#define PROGRAM_TOK 1040
#define DOBEGIN_TOK 1050
#define DOEND_TOK 1060
#define IFBEGIN_TOK 1070
#define IFEND_TOK 1080
#define FUNCTION_TOK 1081

#define OR_OP 1090
#define AND_OP 1100
#define CAND_OP 1101
#define COR_OP 1102

#define ASSIGNMENT_OP 1120

#define PLUS_OP 1220
#define MUL_OP 1230
#define POW_OP 1280

#define COMPARE_OP 1150

#define TYPE_OP 1160

#define VAR_TOK 1110

#define VARIABLE 1130
#define NUMBER 1140
#define STRING 1260
#define BOOLEAN 1240

#define THEN_TOK 1170
#define CONSTANT_TOK 1180
#define COMMA 1190
#define SEMICOLON 1200
#define ALTGUARD 1210



#define FUNCNAME 1250
#define PROGRAMNAME 1251

#define IDENTIFIER 1270

#define NOT_TOK 1290
#define TYPE 1300

#define EOL 1310

#define ERROR 1320

#define DOT 1330

#define LPARREN 1340
#define RPARREN 1350
#define PROCEDURE_TOK 1360;

#define WHITESPACE 1370

%}

%%

;	{return SEMICOLON; }
: {return TYPE_OP; }
, {return COMMA; }
\. {return DOT; }
\( {return LPARREN;}
\) {return RPARREN;}
-> {return THEN_TOK; }

[+-] {return PLUS_OP;}
([\*/\%]|div|mod) {return MUL_OP;}
\^ {return POW_OP;}

\<\> {return COMPARE_OP;}
[\<\>] {return COMPARE_OP; }
[\<\>]= {return COMPARE_OP; }
= {return COMPARE_OP; }


integer {return TYPE;}
boolean {return TYPE;}

not {return NOT_TOK;}
and {return AND_OP;}
or {return OR_OP;}
cand {return CAND_OP;}
cor {return COR_OP;}

 '(\\'|[^'])*' {return STRING;}

\[\] {return ALTGUARD;}

procedure {return PROCEDURE_TOK;}
function {return FUNCTION_TOK;}
constant { return CONSTANT_TOK;}
program { return PROGRAM_TOK; }
begin { return BEGIN_TOK; }
end  {return END_TOK; }
var {return VAR_TOK; }
do {return DOBEGIN_TOK; }
od {return DOEND_TOK; }
if {return IFBEGIN_TOK; }
fi {return IFEND_TOK; }

:= {return ASSIGNMENT_OP; }

false {return BOOLEAN;}
true {return BOOLEAN;}
[0-9]* {return NUMBER;}

[a-zA-Z](_?)([a-zA-Z0-9]_?)* {return IDENTIFIER;}

#(.)*\n { return COMMENT; }

[ \t]+ { return WHITESPACE; }
<<EOF>> { return EOF; }
[^<<EOF>>A-Za-z0-9\%^\*\(\)+-/=\<\>';\[\]_:(-\>)] {return ERROR; }
%%

char **lines;

void readFile(char **filename) {
	struct File *fin = fopen(filename, "r");
	int i = 0;
	size_t len = 0;
	/* TODO: remove hardcoded limit */
	lines = malloc(100 * sizeof(char*)); 
	
	while (getline(&(lines[i]), &len, fin)) != -1) {
		i++;
	}
	fclose(fin);
}

void printError(char *illchar, int line, int column) {
	/* TODO: print line */
	int i = 0;
	printf("Error in line %d: %s", line, "to be added" /*lines[line]*/);
	/* TODO: add more colums for each number */
	for (i; i < column + 17; i++) {
		printf(" ");
	}
	printf("^\n");
	printf("Illegal character (%s) detected at column %d\n", illchar, column);
	
}

int main(int argc, char** argv) {
	int linecount = 0, columnnr = 0;
	
	if (argc > 2) {
		fprintf(stderr, "Usage: %s [filename.c]\n", argv[0]);
		exit(-1);
  	}
	if (argc == 2) {
		readFile(argv[1]);
		yyin = fopen(argv[1], "r");
	}

	//Lees tot EOF
	int val = yylex();
	while (val > EOF) {
		switch (val) {
			case COMMENT: printf("\n"); linecount++; columnnr = 0; break;
			case IDENTIFIER: printf (" ||%s|| ", yytext); columnnr += strlen(yytext); break;
			case EOL : printf("\n"); linecount++; columnnr = 0; break;
			case WHITESPACE: printf(" "); columnnr += strlen(yytext); break;
			case ERROR : printError(yytext, linecount, columnnr); break;
			default: printf (" |%s| ", yytext); columnnr += strlen(yytext);
		}
	
		val = yylex();
	}

	if (argc == 2) {
		fclose(yyin);
	}

	/* TODO: free the lijst */
	printf("Lexing succesfull\n");
	return 0;
}
