%option noyywrap
%{

#include <stdio.h>
#include <stdlib.h>
#include "egclgrammar.h"

%}

%%

;	{return SEMICOLON; }
: {return TYPE_OP; }
, {return COMMA; }
\. {return DOT; }
\( {return LPARREN;}
\) {return RPARREN;}
-> {return THEN_TOK; }

[+-] {return PLUS_OP;}
([\*/\%]|div|mod) {return MUL_OP;}
\^ {return POW_OP;}

\<\> {return COMPARE_OP;}
[\<\>] {return COMPARE_OP; }
[\<\>]= {return COMPARE_OP; }
= {return COMPARE_OP; }


integer {return TYPE;}
boolean {return TYPE;}

not {return NOT_TOK;}
and {return AND_OP;}
or {return OR_OP;}
cand {return CAND_OP;}
cor {return COR_OP;}

 '(\\'|[^'])*' {return STRING;}

\[\] {return ALTGUARD;}

procedure {return PROCEDURE_TOK;}
function {return FUNCTION_TOK;}
constant { return CONSTANT_TOK;}
program { return PROGRAM_TOK; }
begin { return BEGIN_TOK; }
end  {return END_TOK; }
var {return VAR_TOK; }
do {return DOBEGIN_TOK; }
od {return DOEND_TOK; }
if {return IFBEGIN_TOK; }
fi {return IFEND_TOK; }

:= {return ASSIGNMENT_OP; }

false {return BOOLEAN;}
true {return BOOLEAN;}
[0-9]* {return NUMBER;}

[a-zA-Z](_?)([a-zA-Z0-9]_?)* {return IDENTIFIER;}

#(.)*\n { return COMMENT; }

[ \t]+ { return WHITESPACE; }
<<EOF>> { return EOF; }
(\n|\r\n) { return EOL; }
[^<<EOF>>A-Za-z0-9\%\^\*\(\)+-/=\<\>';\[\]_:(-\>)(\\'),\. \t\r\n] {return ERROR; }
%%

